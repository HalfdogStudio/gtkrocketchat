#! /usr/bin/gjs

const Gtk = imports.gi.Gtk;
const Lang = imports.lang;

const GLib = imports.gi.GLib;
const WebKit2 = imports.gi.WebKit2; 
const Notify = imports.gi.Notify;
Notify.init('GTKRocketChat');

Gtk.init(null);

let app;

const CONTEXT = new WebKit2.WebContext();
CONTEXT.get_cookie_manager().set_persistent_storage('cookie.txt', WebKit2.CookiePersistentStorage.TEXT);

const RocketChatWindow = new Lang.Class({
    Name: 'RocketChatWindow',
    Extends: Gtk.ApplicationWindow,

    _init: function(app, uri) {
        this.parent({
            title: 'GtkRocket'
        });
        this.set_size_request(800, 800);
        this._app = app;
        this._buildUI(uri);
    },

    _buildUI: function(uri) {
        this._webView = WebKit2.WebView.new_with_context(CONTEXT);
        this._webView.load_uri(uri);
        this._webView.connect('permission-request', function (webView, request) {
            request.allow();
            return true;
        });
        this._webView.connect('create', Lang.bind(this, this._onCreateWindow));
        this._webView.connect('decide-policy', Lang.bind(this, this._onDecidePolicy));
        this.add(this._webView);
        this.show_all();
    },

    _onCreateWindow: function(webView, action) {
        if (action.is_user_gesture()) {
            const uri = action.get_request().get_uri();
            const window = new RocketChatWindow(this._app, uri);
            window._webView.connect('close', Lang.bind(this, _ => {
                window._webView.try_close();
            }));
            return window._webView;
        }
    },

    _onDecidePolicy: function(webView, decision, type) {
        switch (type) {
            case WebKit2.PolicyDecisionType.RESPONSE:
                // print(decision.get_response().get_mime_type());
                if (
                    decision.get_response().get_mime_type() !== 'text/html'
                ) {
                    decision.download();
                    const download = CONTEXT.download_uri(decision.get_request().get_uri());
                    download.set_allow_overwrite(true);

                    download.connect('failed', function (download, error) {
                        let notify = new Notify.Notification({
                                            summary: 'file downloaded fail',
                                            body: download.get_destination() + ' download fail' + error + ' ' + error.code
                        })
                        notify.show()
                    });

                    download.connect('finished', Lang.bind(this, function(download, filename) {
                        let notify = new Notify.Notification({
                                            summary: 'file downloaded',
                                            body: download.get_destination() + ' download success'
                        })
                        notify.show();
                        this.close();
                    }));
                } else {
                    decision.use();
                }
                break;
            default:
                return false;
        }
        return true;
    }
});


const RocketChat = new Lang.Class({
    Name: 'RocketChat',
    Extends: Gtk.Application,

    _init: function() {
        this._mainWidow = new RocketChatWindow(this, 'https://chat.chaitin.cn/');
        this._mainWidow.connect('delete-event', Gtk.main_quit);
    }
});


app = new RocketChat();

Gtk.main();
